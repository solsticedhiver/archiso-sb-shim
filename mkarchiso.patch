--- mkarchiso	2023-08-29 22:47:52.000000000 +0200
+++ mkarchiso	2023-08-30 10:11:39.038622345 +0200
@@ -374,6 +374,18 @@
     fi
 
     _msg_info "Done! Packages installed successfully."
+
+    # sign the kernel
+    for kernel in "${pacstrap_dir}/boot/vmlinuz-"*; do
+        sbsign --key DB.key --cert DB.crt --output "$kernel" "$kernel"
+    done
+    # signing grubx64.efi and shell once and for all
+    sbsign --key DB.key --cert DB.crt --output "${pacstrap_dir}/usr/lib/systemd/boot/efi/systemd-bootx64.efi" \
+        "${pacstrap_dir}/usr/lib/systemd/boot/efi/systemd-bootx64.efi"
+    sbsign --key DB.key --cert DB.crt --output "${pacstrap_dir}/usr/share/edk2-shell/x64/Shell_Full.efi" \
+        "${pacstrap_dir}/usr/share/edk2-shell/x64/Shell_Full.efi"
+    sbsign --key DB.key --cert DB.crt --output "${pacstrap_dir}/usr/share/edk2-shell/ia32/Shell_Full.efi" \
+        "${pacstrap_dir}/usr/share/edk2-shell/ia32/Shell_Full.efi"
 }
 
 # Customize installation.
@@ -656,10 +668,14 @@
         --locales="en@quot" \
         --themes="" \
         --sbat=/usr/share/grub/sbat.csv \
-        --disable-shim-lock \
         -o "${work_dir}/BOOTIA32.EFI" "boot/grub/grub.cfg=${work_dir}/grub-embed.cfg"
+
+    sbsign --key DB.key --cert DB.crt --output "${work_dir}/BOOTIA32.EFI" "${work_dir}/BOOTIA32.EFI"
+
     # Add GRUB to the list of files used to calculate the required FAT image size.
     efiboot_files+=("${work_dir}/BOOTIA32.EFI"
+                    "${pacstrap_dir}/usr/share/shim-signed/shimia32.efi"
+                    "${pacstrap_dir}/usr/share/shim-signed/mmia32.efi"
                     "${pacstrap_dir}/usr/share/edk2-shell/ia32/Shell_Full.efi")
 
     if [[ " ${bootmodes[*]} " =~ uefi-x64.systemd-boot.esp ]]; then
@@ -673,8 +689,17 @@
         _make_efibootimg "$efiboot_imgsize"
     fi
 
-    # Copy GRUB EFI binary to the default/fallback boot path
-    mcopy -i "${efibootimg}" "${work_dir}/BOOTIA32.EFI" ::/EFI/BOOT/BOOTIA32.EFI
+    # Copy shim EFI binary to the default/fallback boot path
+     mcopy -i "${efibootimg}" \
+        "${pacstrap_dir}/usr/share/shim-signed/shimia32.efi" ::/EFI/BOOT/BOOTIA32.EFI
+    mcopy -i "${efibootimg}" \
+        "${pacstrap_dir}/usr/share/shim-signed/mmia32.efi" ::/EFI/BOOT/mmia32.efi
+    # Copy GRUB EFI binary as grubia32.efi chainloaded by shimia32.efi
+    mcopy -i "${efibootimg}" "${work_dir}/BOOTIA32.EFI" ::/EFI/BOOT/grubia32.efi
+
+    if [[ -f DB.cer ]] ;then
+        mcopy -o -i "${efibootimg}" DB.cer ::/EFI/BOOT/DB.cer
+    fi
 
     # Copy GRUB files
     _run_once _make_common_bootmode_grub_copy_to_isofs
@@ -701,8 +726,18 @@
     _msg_info "Preparing an /EFI directory for the ISO 9660 file system..."
     install -d -m 0755 -- "${isofs_dir}/EFI/BOOT"
 
+    # Copy shim EFI binary to the default/fallback boot path
+    install -m 0644 -- "${pacstrap_dir}/usr/share/shim-signed/shimia32.efi" \
+        "${isofs_dir}/EFI/BOOT/BOOTIA32.EFI"
+    install -m 0644 -- "${pacstrap_dir}/usr/share/shim-signed/mmia32.efi" \
+        "${isofs_dir}/EFI/BOOT/mmia32.efi"
+
     # Copy GRUB EFI binary to the default/fallback boot path
-    install -m 0644 -- "${work_dir}/BOOTIA32.EFI" "${isofs_dir}/EFI/BOOT/BOOTIA32.EFI"
+    install -m 0644 -- "${work_dir}/BOOTIA32.EFI" "${isofs_dir}/EFI/BOOT/grubia32.efi"
+
+    if [[ -f DB.cer ]] ;then
+        install -m 0644 DB.cer "${isofs_dir}/EFI/BOOT/DB.cer"
+    fi
 
     # Copy GRUB configuration files
     _run_once _make_common_bootmode_grub_copy_to_isofs
@@ -733,19 +768,35 @@
         --locales="en@quot" \
         --themes="" \
         --sbat=/usr/share/grub/sbat.csv \
-        --disable-shim-lock \
         -o "${work_dir}/BOOTx64.EFI" "boot/grub/grub.cfg=${work_dir}/grub-embed.cfg"
+
+    sbsign --key DB.key --cert DB.crt --output "${work_dir}/BOOTx64.EFI" "${work_dir}/BOOTx64.EFI"
+
     # Add GRUB to the list of files used to calculate the required FAT image size.
     efiboot_files+=("${work_dir}/BOOTx64.EFI"
+                    "${pacstrap_dir}/usr/share/shim-signed/shimx64.efi"
+                    "${pacstrap_dir}/usr/share/shim-signed/mmx64.efi"
                     "${pacstrap_dir}/usr/share/edk2-shell/x64/Shell_Full.efi")
+    if [[ -f DB.cer ]] ;then
+        efiboot_files+=(DB.cer)
+    fi
 
     efiboot_imgsize="$(du -bcs -- "${efiboot_files[@]}" 2>/dev/null | awk 'END { print $1 }')"
 
     # Create a FAT image for the EFI system partition
     _make_efibootimg "$efiboot_imgsize"
 
-    # Copy GRUB EFI binary to the default/fallback boot path
-    mcopy -i "${efibootimg}" "${work_dir}/BOOTx64.EFI" ::/EFI/BOOT/BOOTx64.EFI
+    # Copy shim EFI binary to the default/fallback boot path
+     mcopy -i "${efibootimg}" \
+        "${pacstrap_dir}/usr/share/shim-signed/shimx64.efi" ::/EFI/BOOT/BOOTx64.EFI
+    mcopy -i "${efibootimg}" \
+        "${pacstrap_dir}/usr/share/shim-signed/mmx64.efi" ::/EFI/BOOT/mmx64.efi
+    # Copy GRUB EFI binary as grubx64.efi chainloaded by shimx64.efi
+    mcopy -i "${efibootimg}" "${work_dir}/BOOTx64.EFI" ::/EFI/BOOT/grubx64.efi
+
+    if [[ -f DB.cer ]] ;then
+        mcopy -i "${efibootimg}" DB.cer ::/EFI/BOOT/DB.cer
+    fi
 
     # Copy GRUB files
     _run_once _make_common_bootmode_grub_copy_to_isofs
@@ -779,8 +830,18 @@
     _msg_info "Preparing an /EFI directory for the ISO 9660 file system..."
     install -d -m 0755 -- "${isofs_dir}/EFI/BOOT"
 
+    # Copy shim EFI binary to the default/fallback boot path
+    install -m 0644 -- "${pacstrap_dir}/usr/share/shim-signed/shimx64.efi" \
+        "${isofs_dir}/EFI/BOOT/BOOTx64.EFI"
+    install -m 0644 -- "${pacstrap_dir}/usr/share/shim-signed/mmx64.efi" \
+        "${isofs_dir}/EFI/BOOT/mmx64.efi"
+
     # Copy GRUB EFI binary to the default/fallback boot path
-    install -m 0644 -- "${work_dir}/BOOTx64.EFI" "${isofs_dir}/EFI/BOOT/BOOTx64.EFI"
+    install -m 0644 -- "${work_dir}/BOOTx64.EFI" "${isofs_dir}/EFI/BOOT/grubx64.efi"
+
+    if [[ -f DB.cer ]] ;then
+        install -m 0644 DB.cer "${isofs_dir}/EFI/BOOT/DB.cer"
+    fi
 
     # Copy GRUB files
     _run_once _make_common_bootmode_grub_copy_to_isofs
@@ -807,18 +868,31 @@
     # Calculate the required FAT image size in bytes
     efiboot_files+=("${pacstrap_dir}/usr/lib/systemd/boot/efi/systemd-bootx64.efi"
                     "${pacstrap_dir}/usr/share/edk2-shell/x64/Shell_Full.efi"
+                    "${pacstrap_dir}/usr/share/shim-signed/shimx64.efi"
+                    "${pacstrap_dir}/usr/share/shim-signed/mmx64.efi"
                     "${profile}/efiboot/"
                     "${pacstrap_dir}/boot/vmlinuz-"*
                     "${pacstrap_dir}/boot/initramfs-"*".img"
                     "${_available_ucodes[@]}")
+    if [[ -f DB.cer ]] ;then
+        efiboot_files+=(DB.cer)
+    fi
     efiboot_imgsize="$(du -bcs -- "${efiboot_files[@]}" \
         2>/dev/null | awk 'END { print $1 }')"
     # Create a FAT image for the EFI system partition
     _make_efibootimg "$efiboot_imgsize"
 
-    # Copy systemd-boot EFI binary to the default/fallback boot path
+    # Copy shim EFI binary to the default/fallback boot path
+    mcopy -i "${efibootimg}" \
+        "${pacstrap_dir}/usr/share/shim-signed/shimx64.efi" ::/EFI/BOOT/BOOTx64.EFI
+    mcopy -i "${efibootimg}" \
+        "${pacstrap_dir}/usr/share/shim-signed/mmx64.efi" ::/EFI/BOOT/mmx64.efi
+    # Copy systemd-boot EFI binary as grubx64.efi chainloaded by shimx64.efi
     mcopy -i "${efibootimg}" \
-        "${pacstrap_dir}/usr/lib/systemd/boot/efi/systemd-bootx64.efi" ::/EFI/BOOT/BOOTx64.EFI
+        "${pacstrap_dir}/usr/lib/systemd/boot/efi/systemd-bootx64.efi" ::/EFI/BOOT/grubx64.efi
+    if [[ -f DB.cer ]] ;then
+        mcopy -i "${efibootimg}" DB.cer ::/EFI/BOOT/DB.cer
+    fi
 
     # Copy systemd-boot configuration files
     mmd -i "${efibootimg}" ::/loader ::/loader/entries
@@ -856,9 +930,19 @@
     _msg_info "Preparing an /EFI directory for the ISO 9660 file system..."
     install -d -m 0755 -- "${isofs_dir}/EFI/BOOT"
 
+    # Copy shim EFI binary to the default/fallback boot path
     # Copy systemd-boot EFI binary to the default/fallback boot path
-    install -m 0644 -- "${pacstrap_dir}/usr/lib/systemd/boot/efi/systemd-bootx64.efi" \
+    install -m 0644 -- "${pacstrap_dir}/usr/share/shim-signed/shimx64.efi" \
         "${isofs_dir}/EFI/BOOT/BOOTx64.EFI"
+    install -m 0644 -- "${pacstrap_dir}/usr/share/shim-signed/mmx64.efi" \
+        "${isofs_dir}/EFI/BOOT/mmx64.efi"
+
+    # Copy systemd-boot EFI binary as grubx64.efi chainloaded by shimx64.efi
+    install -m 0644 "${pacstrap_dir}/usr/lib/systemd/boot/efi/systemd-bootx64.efi" \
+        "${isofs_dir}/EFI/BOOT/grubx64.efi"
+    if [[ -f DB.cer ]] ;then
+        install -m 0644 DB.cer "${isofs_dir}/EFI/BOOT/DB.cer"
+    fi
 
     # Copy systemd-boot configuration files
     install -d -m 0755 -- "${isofs_dir}/loader/entries"
